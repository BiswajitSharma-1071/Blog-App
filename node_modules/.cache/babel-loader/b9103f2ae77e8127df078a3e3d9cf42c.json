{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Biswajit Sharma\\\\Desktop\\\\React_Work\\\\Keeper_App\\\\src\\\\components\\\\App.jsx\";\nimport React, { useState } from \"react\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\nimport Header from \"./Header\";\nimport StartDialog from \"./StartDialog\";\n\nfunction App() {\n  const [noteList, setNoteList] = useState([]);\n  const [deletedNoteList, setDeletedNoteList] = useState([]);\n\n  function addNote(noteContent) {\n    setNoteList(prevValues => {\n      return [...prevValues, noteContent];\n    });\n  }\n\n  function deleteItem(id) {\n    setDeletedNoteList(prevValues => {\n      return [...prevValues, {\n        index: id,\n        note: noteList[id]\n      }];\n    });\n    setNoteList(preValues => {\n      return preValues.filter((element, index) => {\n        return index !== id;\n      });\n    });\n  }\n\n  function restoreContent() {\n    let deleItems = deletedNoteList;\n    let delItems = deleItems.pop();\n    let ind = delItems.index;\n    let noteData = delItems.note;\n    let newItems = [...noteList];\n    newItems.splice(ind, 0, noteData);\n    setNoteList([...newItems]);\n    setDeletedNoteList([...deleItems]);\n  } //<Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n  //   Open form dialog\n  // </Button>\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(StartDialog, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(CreateArea, {\n    onAdd: addNote,\n    deletedListNote: deletedNoteList,\n    restoreItems: restoreContent,\n    onClear: () => {\n      if (noteList.length && window.confirm(\"This action will remove all your notes \")) {\n        setNoteList([]);\n      } else if (!noteList.length) {\n        return \"No notes to clear.\";\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), noteList.map((value, index) => {\n    return React.createElement(Note, {\n      key: index,\n      id: index,\n      title: value.title,\n      content: value.content,\n      onDelete: deleteItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n  }), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Biswajit Sharma/Desktop/React_Work/Keeper_App/src/components/App.jsx"],"names":["React","useState","Footer","Note","CreateArea","Header","StartDialog","App","noteList","setNoteList","deletedNoteList","setDeletedNoteList","addNote","noteContent","prevValues","deleteItem","id","index","note","preValues","filter","element","restoreContent","deleItems","delItems","pop","ind","noteData","newItems","splice","length","window","confirm","map","value","title","content"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\nimport Header from \"./Header\"\nimport StartDialog from \"./StartDialog\"\n\n\n\nfunction App() {\n  const [noteList, setNoteList] = useState([]);\n  const [deletedNoteList, setDeletedNoteList] = useState([]);\n  \n\n  \n  function addNote(noteContent) {\n    setNoteList(prevValues => {\n      return [...prevValues, noteContent];\n    });\n  }\n\n  function deleteItem(id) {\n    setDeletedNoteList(prevValues => {\n      return [...prevValues,\n      {\n        index: id,\n        note: noteList[id]\n      }\n      ]\n    })\n\n    setNoteList(preValues => {\n      return preValues.filter((element, index) => {\n        return index !== id;\n      });\n    });\n  }\n\n  function restoreContent() {\n    let deleItems = deletedNoteList;\n    let delItems = deleItems.pop();\n    let ind = delItems.index\n    let noteData = delItems.note\n    let newItems = [...noteList];\n\n    newItems.splice(ind, 0, noteData);\n\n    setNoteList([...newItems])\n    setDeletedNoteList([...deleItems]);\n  }\n\n\n\n  //<Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n  //   Open form dialog\n  // </Button>\n  return (\n    <div >\n      <StartDialog/>\n      <Header />\n      <CreateArea onAdd={addNote}\n        deletedListNote={deletedNoteList}\n        restoreItems={restoreContent}\n        onClear={() => {\n          if (noteList.length && window.confirm(\"This action will remove all your notes \")) {\n            setNoteList([])\n          }\n          else if (!noteList.length) {\n            return (\"No notes to clear.\")\n          }\n        }}\n      />\n      {\n        noteList.map((value, index) => {\n          return (\n            <Note\n              key={index}\n              id={index}\n              title={value.title}\n              content={value.content}\n              onDelete={deleteItem}\n            />\n          );\n        })\n      }\n      <Footer />\n    </div >\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}